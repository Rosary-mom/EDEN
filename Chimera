<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Projekt Chimera: Das Goldene Zeitalter - Logbuch der Menschheiten</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Roboto+Mono:wght@400;700&family=Orbitron:wght@400;700&display=swap" rel="stylesheet">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <style>
        body {
            font-family: 'Roboto Mono', monospace;
            background-color: #0e0e0e;
            color: #ee6e6e;
            background-image: url('https://upload.wikimedia.org/wikipedia/commons/3/39/Concept_Mars_colony.jpg');
            background-size: cover;
        }
        .font-orbitron {
            font-family: 'Orbitron', sans-serif;
        }
        .resource-card, .project-card, .log-card, .matrix-card, .cockpit-card {
            background-color: rgba(0, 20, 40, 0.7);
            border: 1px solid rgba(255, 255, 255, 0.3);
            backdrop-filter: blur(5px);
            transition: all 0.3s ease;
            padding: 1rem;
            border-radius: 0.5rem;
        }
        .action-button {
            background-color: rgba(0, 100, 100, 0.6);
            border: 1px solid rgba(255, 255, 0.5);
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
            color: white;
            padding: 0.75rem 1.5rem;
            border-radius: 0.5rem;
            margin-right: 1rem;
        }
        .action-button:hover {
            background-color: rgba(0, 150, 150, 0.8);
            transform: scale(1.05);
        }
        .progress-bar {
            background-color: rgba(255, 255, 255, 0.2);
            height: 0.5rem;
            border-radius: 0.25rem;
            overflow: hidden;
        }
        .progress-fill {
            background-color: #ee6e6e;
            height: 100%;
            transition: width 0.3s ease;
        }
        .gauge {
            width: 100px;
            height: 100px;
            border-radius: 50%;
            border: 5px solid #ee6e6e;
            position: relative;
            margin: 0 auto;
        }
        .gauge-fill {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: conic-gradient(#ee6e6e 0% var(--fill), transparent var(--fill) 100%);
            border-radius: 50%;
        }
        .hidden {
            display: none;
        }
        canvas {
            border: 1px solid #ee6e6e;
            background: #000;
        }
        #ranking {
            margin-top: 20px;
            padding: 10px;
            background: rgba(0, 20, 40, 0.7);
            border-radius: 8px;
        }
        table { width: 100%; border-collapse: collapse; }
        th, td { padding: 8px; border: 1px solid rgba(255, 255, 255, 0.3); text-align: left; color: #ee6e6e; }
        input[type="text"] { padding: 8px; margin: 5px; width: calc(100% - 20px); background: rgba(255, 255, 255, 0.1); color: #ee6e6e; border: 1px solid rgba(255, 255, 255, 0.3); }
        @media (max-width: 600px) { body { padding: 5px; } .action-button { width: 100%; margin-bottom: 10px; } }
        #player-select { margin-bottom: 20px; text-align: center; }
        #player-select select { padding: 8px; background: rgba(255, 255, 255, 0.1); color: #ee6e6e; border: 1px solid rgba(255, 255, 255, 0.3); }
        #population-pyramid { width: 100%; height: 300px; }
    </style>
</head>
<body class="p-8">
    <div class="max-w-6xl mx-auto">
        <h1 class="text-4xl font-orbitron mb-4 text-center">PROJEKT CHIMERA: Logbuch der Menschheiten</h1>
        <p class="text-2xl mb-6 text-center">Operation: Das Goldene Zeitalter // RUNDE: <span id="round-counter">1</span> // Aktueller Spieler: <span id="current-player">Spieler 1</span></p>

        <div id="player-select">
            <label for="player-switch">Spieler wechseln: </label>
            <select id="player-switch">
                <option value="0">Spieler 1</option>
                <option value="1">Spieler 2</option>
                <option value="2">Spieler 3</option>
                <option value="3">Spieler 4</option>
            </select>
            <button id="switch-player" class="action-button">Wechseln 👥</button>
        </div>

        <img src="https://media.giphy.com/media/kEESrxmc9pd9Jb064Q/giphy.gif" alt="Climate Crisis GIF" class="w-full mb-8 rounded-lg shadow-lg mx-auto" style="max-width: 600px;">

        <div class="flex justify-center mb-8 flex-wrap">
            <button id="sos-button" class="action-button">Send SOS Signal (Light App Reaction) 🆘</button>
            <button id="reset-button" class="action-button">Spiel zurücksetzen</button>
            <button id="start-gambit" class="action-button">Start Gambit</button>
            <button id="enter-cockpit" class="action-button">Enter Mars Mission Cockpit</button>
            <button id="dwarf-engine" class="action-button">Activate DWARF Engine</button>
            <button id="mine-asteroid" class="action-button">Asteroiden Mining starten ☄️</button>
        </div>

        <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-8">
            <div class="resource-card">
                <h2 class="text-2xl font-orbitron mb-4">Kommando-Ressourcen</h2>
                <ul class="list-disc ml-4">
                    <li>Kapital (Mrd.): <span id="capital">18</span> 💰</li>
                    <li>Datenspeicher (Ziop.): <span id="data">5</span> 💾</li>
                    <li>Legitimität (%): <span id="legitimacy">75</span> 📜</li>
                    <li>Personal (Punkte): <span id="personnel">100</span> 👥</li>
                </ul>
                <p class="mt-4">Verwalte diese Ressourcen weise, um das Universum zu erobern.</p>
            </div>

            <div class="matrix-card">
                <h2 class="text-2xl font-orbitron mb-4">Gambit-Matrix</h2>
                <ul class="list-disc ml-4">
                    <li>Wissenschaftliche Studie veröffentlichen 📚</li>
                    <li>Marktmanipulation (Levy-Zyklus) 📉</li>
                    <li>Lobby-Kampagne starten 🗳️</li>
                    <li>Startups auf Github aquirieren 💻</li>
                </ul>
                <p class="mt-4">Wähle deine Strategie für die Siedlung des Universums.</p>
            </div>

            <div class="log-card">
                <h2 class="text-2xl font-orbitron mb-4">Operations-Log & Archiv der Menschheiten</h2>
                <ul id="log-list" class="list-disc ml-4">
                    <li>Runde 1 initialisiert: Mars-Kolonie etabliert. 🚀</li>
                    <li>Enlightenment-Pfad aktiviert. PSPS II's Worte: "See what we created!" 🌟</li>
                </ul>
            </div>
        </div>

        <div class="project-card mb-8">
            <h2 class="text-2xl font-orbitron mb-4">Globale Projekte</h2>
            <ul class="list-disc ml-4">
                <li>Homo 1 Billiarden: Dritte Chimera starten 👥</li>
                <li>Chimera jat aktiv, Deine 6 Klimaziele 🌍</li>
                <li>Rosary Think Tank: Dein Ziel: Das Goldene Operation 🧠</li>
                <li>Thera-Climafonds gründen 💰</li>
                <li>Amazon Legacy Gambit 🌳</li>
                <li>Going Clay Gambit 🏺</li>
                <li>Debt Crisis Gambit 📉</li>
                <li>Evident Facts Gambit 🔍</li>
                <li>Crypto Voucher Investment 🪙</li>
                <li>International Alliance Gambit 🤝</li>
            </ul>
        </div>

        <!-- Mars Mission Cockpit with Embedded Canva and DWARF Engine -->
        <div id="cockpit-section" class="cockpit-card mb-8 hidden">
            <h2 class="text-2xl font-orbitron mb-4 text-center">Mars Mission Cockpit: Solar System Explorer</h2>
            <p class="text-center mb-4">Aktiviere den DWARF-Engine für 3D-Erkundung! Embedded Vision:</p>
            <iframe src="https://www.canva.com/design/DAGqacd25Lg/qjKpPfdQ6PNoxrjbV0E7nw/view?embed" title="Solar System Explorer" class="w-full h-96 rounded-lg shadow-lg" allowfullscreen></iframe>
            <div class="grid grid-cols-2 gap-4 mt-4">
                <div>
                    <h3 class="text-xl font-orbitron">Energie Gauge ⚡</h3>
                    <div class="gauge"><div class="gauge-fill" id="energy-gauge" style="--fill: 50%;"></div></div>
                </div>
                <div>
                    <h3 class="text-xl font-orbitron">Settlement Progress 🏗️</h3>
                    <div class="progress-bar"><div class="progress-fill" id="settlement-progress" style="width: 20%;"></div></div>
                </div>
                <div>
                    <h3 class="text-xl font-orbitron">Exploration Log 📝</h3>
                    <p id="exploration-log">Initial scan: Solar System awaits! PSPS II: "This is a real gamechanger!"</p>
                </div>
                <div>
                    <button id="explore-button" class="action-button w-full">Explore New Sector 🔭</button>
                </div>
                <div class="col-span-2">
                    <h3 class="text-xl font-orbitron text-center">DWARF Engine: Mars Lander Simulation 🚀</h3>
                    <canvas id="lander-canvas" width="400" height="200" class="mx-auto block"></canvas>
                    <p class="text-center mt-2">Use arrow keys to land safely on Mars! ↑</p>
                </div>
            </div>
            <p class="mt-4 text-center">Commander Kirk: "Turn on the DWARF engine—explore and settle!"</p>
        </div>

        <img src="https://media.giphy.com/media/kDfQYYRql4LSGXEfiS/giphy.gif" alt="Mars Exploration Loop GIF" class="w-full mb-8 rounded-lg shadow-lg mx-auto" style="max-width: 600px;">

        <div id="ranking" class="mb-8">
            <h2 class="text-2xl font-orbitron mb-4 text-center">Spieler-Ranking 🏆</h2>
            <input type="text" id="player-name" placeholder="Dein Name für Ranking">
            <button id="save-score" class="action-button">Score speichern</button>
            <table id="ranking-table">
                <thead><tr><th>Name</th><th>Score</th><th>Datum</th></tr></thead>
                <tbody></tbody>
            </table>
        </div>

        <div id="population-pyramid-container" class="mb-8">
            <h2 class="text-2xl font-orbitron mb-4 text-center">3D Bevölkerungspyramide 👥</h2>
            <div id="population-pyramid" style="width: 100%; height: 400px;"></div>
        </div>

        <p class="mt-8 text-sm text-center">©®™ ROSARY 2025 ff</p>
        <p class="text-lg font-orbitron text-center">Be a SuperHero! -"CHIMMY" 🦸‍♂️</p>
    </div>

    <script>
        let currentPlayerIndex = 0;
        const players = [
            { capital: 18, data: 5, legitimacy: 75, personnel: 100, settlementProgress: 20, name: 'Spieler 1' },
            { capital: 18, data: 5, legitimacy: 75, personnel: 100, settlementProgress: 20, name: 'Spieler 2' },
            { capital: 18, data: 5, legitimacy: 75, personnel: 100, settlementProgress: 20, name: 'Spieler 3' },
            { capital: 18, data: 5, legitimacy: 75, personnel: 100, settlementProgress: 20, name: 'Spieler 4' }
        ];
        let round = 1;
        const apiKey = 'xai-fehK0vvIlsNogXM8rrBsx6djVRgY4c1gL4R2WcNTCyRixzK6PBmvq0lsvepfYT7x7DMnEkBRIzgw5nC9'; // API Security Key
        const nasaKey = 'KCD8VILzUZP6KJEyKcK1noU2OYX9WtaqJGhHHxTa'; // NASA API Key

        const rankingBody = document.getElementById('ranking-table').querySelector('tbody');

        // Lade Ranking aus localStorage
        function loadRanking() {
            const rankings = JSON.parse(localStorage.getItem('chimeraRankings')) || [];
            rankings.sort((a, b) => b.score - a.score); // Sortiere absteigend
            rankingBody.innerHTML = '';
            rankings.forEach(entry => {
                const row = document.createElement('tr');
                row.innerHTML = `<td>${entry.name}</td><td>${entry.score}</td><td>${entry.date}</td>`;
                rankingBody.appendChild(row);
            });
        }
        
        loadRanking(); // Initial laden

        const updateResources = () => {
            const player = players[currentPlayerIndex];
            document.getElementById('capital').textContent = player.capital;
            document.getElementById('data').textContent = player.data;
            document.getElementById('legitimacy').textContent = player.legitimacy;
            document.getElementById('personnel').textContent = player.personnel;
            document.getElementById('energy-gauge').style.setProperty('--fill', `${player.legitimacy}%`);
            document.querySelector('#settlement-progress').style.width = `${player.settlementProgress}%`;
            document.getElementById('current-player').textContent = player.name;
            updatePopulationPyramid(player.personnel); // Update 3D Pyramide
        };

        const addLog = (message) => {
            const li = document.createElement('li');
            li.textContent = message;
            document.getElementById('log-list').appendChild(li);
        };

        async function fetchFromXAI(prompt) {
            try {
                const response = await fetch('https://api.x.ai/v1/chat/completions', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${apiKey}`
                    },
                    body: JSON.stringify({
                        messages: [
                            { role: "system", content: "You are a game assistant for Chimera. Respond with a number for harvest or gambit outcome." },
                            { role: "user", content: prompt }
                        ],
                        model: "grok-4-latest",
                        stream: false,
                        temperature: 0.7
                    })
                });
                const data = await response.json();
                return parseFloat(data.choices[0].message.content.trim()) || 1.0; // Extrahiere Zahl als Faktor
            } catch (e) {
                addLog('xAI API-Fehler: Fallback-Daten verwendet 🔄');
                return Math.random() * 2 + 1; // Fallback random factor
            }
        }

        async function fetchNASAData() {
            try {
                const response = await fetch(`https://api.nasa.gov/planetary/earth/imagery?lon=100.75&lat=1.5&date=2014-02-01&api_key=${nasaKey}`);
                const data = await response.json();
                return data.cloud_score ? data.cloud_score + 1 : 1.2; // Verwende cloud_score als Faktor
            } catch (e) {
                addLog('NASA API-Fehler: Fallback-Daten verwendet 🔄');
                return 1.2;
            }
        }

        document.getElementById('start-gambit').addEventListener('click', async () => {
            let factor = await fetchFromXAI("Generate a random harvest multiplier for a gambit between 1 and 3.");
            round++;
            document.getElementById('round-counter').textContent = round;
            const risk = Math.random() > 0.5 ? 'erfolgreich' : 'riskant';
            addLog(`Runde ${round}: Gambit initiiert - ${risk}. Enlightenment +10. xAI-Factor: ${factor.toFixed(2)}`);
            players[currentPlayerIndex].legitimacy += 10 * factor;
            players[currentPlayerIndex].settlementProgress += 5 * factor;
            updateResources();
            alert('Gambit initiated! Risk level: Medium. Reward: +10 legitimacy points (adjusted by xAI data).');
        });

        document.getElementById('sos-button').addEventListener('click', () => {
            addLog('SOS-Signal gesendet: Lichtreaktion aktiviert - Hilfsressourcen incoming. 🆘');
            alert('SOS sent! Allies alerted—resources en route.');
            players[currentPlayerIndex].capital += 2;
            updateResources();
        });

        document.getElementById('reset-button').addEventListener('click', () => {
            round = 1;
            players.forEach(player => {
                player.capital = 18;
                player.data = 5;
                player.legitimacy = 75;
                player.personnel = 100;
                player.settlementProgress = 20;
            });
            document.getElementById('round-counter').textContent = round;
            document.getElementById('log-list').innerHTML = '<li>Runde 1 initialisiert: Mars-Kolonie etabliert. 🚀</li><li>Enlightenment-Pfad aktiviert. PSPS II\'s Worte: "See what we created!" 🌟</li>';
            updateResources();
            alert('Spiel zurückgesetzt. Neuer Anfang für die Menschheiten.');
        });

        document.getElementById('enter-cockpit').addEventListener('click', () => {
            const cockpit = document.getElementById('cockpit-section');
            cockpit.classList.toggle('hidden');
            if (!cockpit.classList.contains('hidden')) {
                addLog('Mars Mission Cockpit aktiviert: Solar System Explorer online. 🔭');
                document.getElementById('exploration-log').textContent = 'Scanning solar system... Mars mission ready! Commander Kirk: "Engage!"';
            }
        });

        document.getElementById('dwarf-engine').addEventListener('click', () => {
            addLog('DWARF-Engine aktiviert: Mars-Landungssimulation gestartet. 🚀');
            startLanderSimulation();
            alert('DWARF Engine online! Navigate the lander to Mars surface.');
        });

        document.getElementById('explore-button').addEventListener('click', async () => {
            let factor = await fetchFromXAI("Generate a random exploration factor between 1 and 2.");
            players[currentPlayerIndex].settlementProgress += 10 * factor;
            if (players[currentPlayerIndex].settlementProgress > 100) players[currentPlayerIndex].settlementProgress = 100;
            updateResources();
            addLog('Neuer Sektor erkundet: Settlement +10% (adjusted by xAI: ' + factor.toFixed(2) + '). Solar System expands. 🌌');
            alert('Exploration successful! New planets discovered.');
        });

        document.getElementById('mine-asteroid').addEventListener('click', async () => {
            let factor = await fetchNASAData();
            const miningYield = Math.floor(5 * factor) + Math.floor(Math.random() * 5) + 1;
            players[currentPlayerIndex].data += miningYield;
            addLog(`Asteroiden Mining erfolgreich! +${miningYield} Datenspeicher. ☄️ NASA-Faktor: ${factor.toFixed(2)}`);
            updateResources();
            alert(`Mining abgeschlossen! Ertrag: +${miningYield} Datenspeicher.`);
        });

        document.getElementById('save-score').addEventListener('click', () => {
            const name = document.getElementById('player-name').value.trim();
            if (!name) return alert('Bitte Namen eingeben!');
            const rankings = JSON.parse(localStorage.getItem('chimeraRankings')) || [];
            const score = players[currentPlayerIndex].legitimacy + players[currentPlayerIndex].settlementProgress; // Beispiel-Score: Legitimität + Progress
            rankings.push({ name, score, date: new Date().toLocaleDateString() });
            localStorage.setItem('chimeraRankings', JSON.stringify(rankings));
            loadRanking();
            addLog(`Score gespeichert für ${name}: ${score} 🏆`);
        });

        document.getElementById('switch-player').addEventListener('click', () => {
            currentPlayerIndex = parseInt(document.getElementById('player-switch').value);
            addLog(`Spieler gewechselt zu ${players[currentPlayerIndex].name} 👥`);
            updateResources();
        });

        function startLanderSimulation() {
            const canvas = document.getElementById('lander-canvas');
            const ctx = canvas.getContext('2d');
            let y = 10; // Lander starting position
            let vy = 0; // Velocity
            const gravity = 0.1;
            const thrust = 0.2;

            const keyHandler = (e) => {
                if (e.key === 'ArrowUp') vy -= thrust;
            };
            document.addEventListener('keydown', keyHandler);

            function loop() {
                ctx.clearRect(0, 0, canvas.width, canvas.height);
                vy += gravity;
                y += vy;
                if (y >= canvas.height - 20) {
                    y = canvas.height - 20;
                    vy = 0;
                    addLog('Mars-Landung erfolgreich! Resources +5. 🎉');
                    players[currentPlayerIndex].capital += 5;
                    updateResources();
                    document.removeEventListener('keydown', keyHandler);
                    return;
                }
                // Draw lander
                ctx.fillStyle = '#ee6e6e';
                ctx.fillRect(180, y, 40, 20);
                // Draw Mars surface
                ctx.fillStyle = '#8b4513';
                ctx.fillRect(0, canvas.height - 10, canvas.width, 10);
                requestAnimationFrame(loop);
            }
            loop();
        }

        // 3D Bevölkerungspyramide mit Three.js
        function updatePopulationPyramid(personnel) {
            const container = document.getElementById('population-pyramid');
            container.innerHTML = ''; // Clear previous
            const scene = new THREE.Scene();
            const camera = new THREE.PerspectiveCamera(75, container.clientWidth / container.clientHeight, 0.1, 1000);
            const renderer = new THREE.WebGLRenderer();
            renderer.setSize(container.clientWidth, container.clientHeight);
            container.appendChild(renderer.domElement);

            // Simple pyramid geometry based on personnel
            const pyramidHeight = personnel / 10; // Scale
            const geometry = new THREE.ConeGeometry(5, pyramidHeight, 4);
            const material = new THREE.MeshBasicMaterial({ color: 0x00ffff });
            const pyramid = new THREE.Mesh(geometry, material);
            scene.add(pyramid);

            camera.position.z = 20;

            let mouseX = 0, mouseY = 0;
            container.addEventListener('mousemove', (e) => {
                mouseX = (e.clientX / window.innerWidth) * 2 - 1;
                mouseY = -(e.clientY / window.innerHeight) * 2 + 1;
            });

            function animate() {
                requestAnimationFrame(animate);
                pyramid.rotation.y += 0.01;
                pyramid.rotation.x = mouseY * 0.5;
                pyramid.rotation.y += mouseX * 0.5;
                renderer.render(scene, camera);
            }
            animate();
        }

        updateResources();
        updatePopulationPyramid(players[currentPlayerIndex].personnel); // Initial pyramid
    </script>
</body>
</html>
